{"version":3,"sources":["components/Logo/Logo.module.css","components/Conditions/Conditions.module.css","components/Forecast/Forecast.module.css","components/Conditions/Conditions.js","components/Forecast/Forecast.js","components/Logo/Logo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","conditions","props","console","log","className","Wrapper","error","Small","loading","Loader","Number","responseObj","cod","width","height","chartType","loader","data","list","map","l","Date","dt","toLocaleDateString","temp","min","morn","night","max","options","legend","bar","groupWidth","candlestick","fallingColor","strokeWidth","fill","risingColor","rootProps","key","eve","Forecast","lat","lon","unit","setUnit","useState","setResponseObj","setError","setLoading","onSubmit","e","preventDefault","fetch","process","then","response","json","Error","catch","err","message","Radio","type","name","checked","value","onChange","target","Button","Conditions","Logo","sky","circle","cloud1","cloud2","cloud3","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.795ef4b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"circle\":\"Logo_circle__2ACV3\",\"sky\":\"Logo_sky__3siX9\",\"cloud1\":\"Logo_cloud1__28Qj1\",\"cloud2\":\"Logo_cloud2__2lzsh\",\"cloud3\":\"Logo_cloud3__1HnkX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Conditions_Wrapper__1WUTs\",\"Small\":\"Conditions_Small__1VrqO\",\"Loader\":\"Conditions_Loader__PcSFJ\",\"spin\":\"Conditions_spin__b05Or\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textInput\":\"Forecast_textInput__39zH8\",\"Radio\":\"Forecast_Radio__1Ejlt\",\"Button\":\"Forecast_Button__3Y_IL\"};","import React from 'react';\nimport {\n    Wrapper,\n    Small,\n    Loader\n} from './Conditions.module.css'\nimport Chart from \"react-google-charts\";\n\nconst conditions = (props) => {\n    console.log(props);\n    return (\n        <div className={Wrapper}>\n\n            {props.error && <small className={Small}>Please enter a valid city.</small>}\n\n            {props.loading && <div className={Loader} />}\n\n\n            {Number(props.responseObj.cod) === 200 ?\n                <>\n\n                    <Chart\n                        width={'100%'}\n                        height={350}\n                        chartType=\"CandlestickChart\"\n                        loader={<div>Loading Chart</div>}\n                        data={[\n                            ['day', 'a', 'b', 'c', 'd'],\n                            ...props.responseObj.list.map(l => [\n                                new Date(l.dt * 1000).toLocaleDateString(),\n                                l.temp.min,\n                                l.temp.morn,\n                                l.temp.night,\n                                l.temp.max,\n                            ])\n                        ]}\n                        options={{\n                            legend: 'none',\n                            bar: { groupWidth: '100%' }, // Remove space between bars.\n                            candlestick: {\n                            fallingColor: { strokeWidth: 0, fill: '#a52714' }, // red\n                            risingColor: { strokeWidth: 0, fill: '#0f9d58' }, // green\n                            },\n                        }}\n                        rootProps={{ 'data-testid': 'candlestick-chart' }}\n                    />\n                \n                    {props.responseObj.list.map(l => {\n                        return <code key={l.dt} >{new Date(l.dt * 1000).toLocaleDateString()} {l.temp.morn} {l.temp.min} {l.temp.max} {l.temp.eve}</code>\n                    })}\n                </>\n            : null\n            }\n        </div>\n    )\n}\n\nexport default conditions;","import React, { useState } from 'react';\nimport Conditions from '../Conditions/Conditions';\nimport {\n    Radio,\n    Button\n} from './Forecast.module.css';\n\nconst Forecast = () => {\n    const [lat, lon] = [42.99, -71.46]\n    let [unit, setUnit] = useState('imperial');\n    let [responseObj, setResponseObj] = useState({});\n    let [error, setError] = useState(false);\n    let [loading, setLoading] = useState(false);\n\n    function getForecast(e) {\n        e.preventDefault();\n\n        // Clear state in preparation for new data\n        setError(false);\n        setResponseObj({});\n        \n        setLoading(true);\n\n        fetch(`https://community-open-weather-map.p.rapidapi.com/forecast/daily?lat=${lat}&lon=${lon}&cnt=16&units=${unit}`, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-key\": process.env.REACT_APP_API_KEY,\n                \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\"\n            }\n        })\n        .then(response => response.json())\n        .then(response => {\n            if (Number(response.cod) !== 200) {\n                throw new Error()\n            }\n\n            setResponseObj(response);\n            setLoading(false);\n        })\n        .catch(err => {\n            setError(true);\n            setLoading(false);\n            console.log(err.message);\n        });\n    }\n\n    return (\n        <div>\n            <h2>Find Current Weather Conditions</h2>\n            <form onSubmit={getForecast}>\n                <label className={Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"imperial\"}\n                        value=\"imperial\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Fahrenheit\n                </label>\n                <label className={Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"metric\"}\n                        value=\"metric\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Celcius\n                </label>\n\n                <button className={Button} type=\"submit\">Get Forecast</button>\n            </form>\n            <Conditions\n               responseObj={responseObj}\n               error={error}\n               loading={loading}\n               />\n        </div>\n    )\n}\n\nexport default Forecast;","import React from 'react';\nimport {\n    sky,\n    circle,\n    cloud1,\n    cloud2,\n    cloud3\n} from \"./Logo.module.css\"\n\nconst Logo = () => (\n    <div className={sky}>\n        <div className={circle}/>\n        <div className={cloud1} />\n        <div className={cloud2} />\n        <div className={cloud3} />\n    </div>\n)\n\nexport default Logo;","import React from 'react';\nimport './App.css';\nimport Forecast from \"./components/Forecast/Forecast\";\nimport Logo from './components/Logo/Logo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Logo />\n        <h1>React Weather App</h1>\n      </header>\n      <main>\n        <Forecast />\n      </main>\n      <footer>\n        Page created by yournamehere\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}